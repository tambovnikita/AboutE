import os
import asyncio
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from motor.motor_asyncio import AsyncIOMotorClient


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_URL = os.getenv("API_URL")
MONGO_URI = os.getenv("MONGO_URI")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="UTC")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = AsyncIOMotorClient(MONGO_URI)
db = client["AbouteDB"]
collection = db["people"]


@dp.message(CommandStart())
async def handle_start_with_referral(message: types.Message, command: CommandStart):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    args = command.args
    if args:
        try:
            api_key = str(args)
            # await message.answer(api_key)

            # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_data = await update_user_by_api_key(api_key, {"telegram_user_id": message.from_user.id})
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
                return

            username = user_data.get('username', '')
            name_parts = [
                user_data.get('first_name', ''),
                user_data.get('last_name', '')
            ]
            full_name = ' '.join(filter(None, name_parts)).strip()
            name_in_text = f"<b>{username}</b>"
            if len(full_name) > 0:
                name_in_text += f" <i>({full_name})</i>"
            
            text = "\n".join([
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name_in_text}!",
                "–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 06:00 UTC (09:00 Russia, Moscow) –≤ –¥–Ω–∏, –∫–æ–≥–¥–∞ —É –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö persons –î–Ω–∏ –†–æ–∂–¥–µ–Ω–∏—è üéÇ",
                '\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–∞–π—Ç –∏ <b>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"</b>.',
                '\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–π—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω.'
            ])
            await message.answer(text, parse_mode="HTML")

        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!")
    
    else:
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        await message.answer(f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç https://aboute.online –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ 06:00 UTC (09:00 Russia, Moscow) –≤ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è üéÇ", parse_mode="HTML")


@dp.message(Command("go"))
async def handle_go_command(message: types.Message):
    await check_birthdays()


async def get_user_by_api_key(api_key: str):
    url = f"{API_URL}/users/{api_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    user_data = await response.json()
                    return user_data
                elif response.status == 404:
                    # print("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
                else:
                    # print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}")
                    return None
    except aiohttp.ClientConnectorError:
        # print("üî• –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        return None


async def update_user_by_api_key(api_key: str, update_data: dict):
    url = f"{API_URL}/users/{api_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.put(url, json=update_data) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 404:
                    # print("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
                else:
                    # print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}")
                    return None
    except aiohttp.ClientConnectorError:
        # print("üî• –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        return None


async def check_birthdays():
    today = datetime.now()
    current_day = today.day
    current_month = today.month
    current_year = today.year

    pipeline = [
        {
            "$match": {
                "settings.enableBirthdayReminder": True
            }
        },
        {
            "$addFields": {
                "birthdate": {
                    "$dateFromString": {
                        "dateString": "$info.birthdate",
                        "format": "%Y-%m-%d"
                    }
                }
            }
        },
        {
            "$addFields": {
                "birth_day": {"$dayOfMonth": "$birthdate"},
                "birth_month": {"$month": "$birthdate"},
                "birth_year": {"$year": "$birthdate"}
            }
        },
        {
            "$match": {
                "birth_day": current_day,
                "birth_month": current_month
            }
        },
    ]

    try:
        people = await collection.aggregate(pipeline).to_list(None)
        
        if not people:
            return

        for person in people:
            api_key = person.get('api_key', None)
            if not api_key:
                continue
            user_data = await get_user_by_api_key(api_key)
            if not user_data:
                continue
            telegram_user_id = user_data["telegram_user_id"]

            nickname = person["info"].get('nickname', '')
            name_parts = [
                person["info"].get('last_name', ''),
                person["info"].get('first_name', ''),
                person["info"].get('patronymic', '')
            ]
            full_name = ' '.join(filter(None, name_parts)).strip()
            name_in_text = f"<b>{nickname}</b>"
            if len(full_name) > 0:
                name_in_text += f" <i>({full_name})</i>"

            birth_year = person.get('birth_year', current_year)
            age = current_year - birth_year

            date_str = today.strftime("%d.%m.%Y")

            text = (f"üéÇ –°–µ–≥–æ–¥–Ω—è <b>({date_str})</b> –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è\n—É {name_in_text}\n–∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age} –ª–µ—Ç")
            await bot.send_message(chat_id=telegram_user_id, text=text, parse_mode="HTML")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π: {e}")


async def main():
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.add_job(check_birthdays, 'cron', hour=6, minute=00)
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
